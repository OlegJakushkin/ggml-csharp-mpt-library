/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_libmpt_library(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_libmpt_library(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_libmpt_library(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include "mpt.h"

SWIGINTERN std::vector< mpt_layer > *new_std_vector_Sl_mpt_layer_Sg___SWIG_2(int capacity){
        std::vector< mpt_layer >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< mpt_layer >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN mpt_layer std_vector_Sl_mpt_layer_Sg__getitemcopy(std::vector< mpt_layer > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< mpt_layer >::value_type const &std_vector_Sl_mpt_layer_Sg__getitem(std::vector< mpt_layer > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_mpt_layer_Sg__setitem(std::vector< mpt_layer > *self,int index,mpt_layer const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_mpt_layer_Sg__AddRange(std::vector< mpt_layer > *self,std::vector< mpt_layer > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< mpt_layer > *std_vector_Sl_mpt_layer_Sg__GetRange(std::vector< mpt_layer > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< mpt_layer >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_mpt_layer_Sg__Insert(std::vector< mpt_layer > *self,int index,mpt_layer const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_mpt_layer_Sg__InsertRange(std::vector< mpt_layer > *self,int index,std::vector< mpt_layer > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_mpt_layer_Sg__RemoveAt(std::vector< mpt_layer > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_mpt_layer_Sg__RemoveRange(std::vector< mpt_layer > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< mpt_layer > *std_vector_Sl_mpt_layer_Sg__Repeat(mpt_layer const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< mpt_layer >(count, value);
      }
SWIGINTERN void std_vector_Sl_mpt_layer_Sg__Reverse__SWIG_0(std::vector< mpt_layer > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_mpt_layer_Sg__Reverse__SWIG_1(std::vector< mpt_layer > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_mpt_layer_Sg__SetRange(std::vector< mpt_layer > *self,int index,std::vector< mpt_layer > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< char > *new_std_vector_Sl_char_Sg___SWIG_2(int capacity){
        std::vector< char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN char std_vector_Sl_char_Sg__getitemcopy(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< char >::value_type const &std_vector_Sl_char_Sg__getitem(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__setitem(std::vector< char > *self,int index,char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__AddRange(std::vector< char > *self,std::vector< char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__GetRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Insert(std::vector< char > *self,int index,char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__InsertRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveAt(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__Repeat(char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< char >(count, value);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_0(std::vector< char > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_1(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__SetRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Contains(std::vector< char > *self,char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_char_Sg__IndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_char_Sg__LastIndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Remove(std::vector< char > *self,char const &value){
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< gpt_vocab::id > *new_std_vector_Sl_gpt_vocab_id_Sg___SWIG_2(int capacity){
        std::vector< gpt_vocab::id >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< gpt_vocab::id >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN gpt_vocab::id std_vector_Sl_gpt_vocab_id_Sg__getitemcopy(std::vector< gpt_vocab::id > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< gpt_vocab::id >::value_type const &std_vector_Sl_gpt_vocab_id_Sg__getitem(std::vector< gpt_vocab::id > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_gpt_vocab_id_Sg__setitem(std::vector< gpt_vocab::id > *self,int index,gpt_vocab::id const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_gpt_vocab_id_Sg__AddRange(std::vector< gpt_vocab::id > *self,std::vector< gpt_vocab::id > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< gpt_vocab::id > *std_vector_Sl_gpt_vocab_id_Sg__GetRange(std::vector< gpt_vocab::id > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< gpt_vocab::id >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_gpt_vocab_id_Sg__Insert(std::vector< gpt_vocab::id > *self,int index,gpt_vocab::id const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_gpt_vocab_id_Sg__InsertRange(std::vector< gpt_vocab::id > *self,int index,std::vector< gpt_vocab::id > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_gpt_vocab_id_Sg__RemoveAt(std::vector< gpt_vocab::id > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_gpt_vocab_id_Sg__RemoveRange(std::vector< gpt_vocab::id > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< gpt_vocab::id > *std_vector_Sl_gpt_vocab_id_Sg__Repeat(gpt_vocab::id const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< gpt_vocab::id >(count, value);
      }
SWIGINTERN void std_vector_Sl_gpt_vocab_id_Sg__Reverse__SWIG_0(std::vector< gpt_vocab::id > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_gpt_vocab_id_Sg__Reverse__SWIG_1(std::vector< gpt_vocab::id > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_gpt_vocab_id_Sg__SetRange(std::vector< gpt_vocab::id > *self,int index,std::vector< gpt_vocab::id > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(int capacity){
        std::vector< float >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< float >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN float std_vector_Sl_float_Sg__getitemcopy(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg__getitem(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__setitem(std::vector< float > *self,int index,float const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__AddRange(std::vector< float > *self,std::vector< float > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__GetRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< float >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Insert(std::vector< float > *self,int index,float const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__InsertRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveAt(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__Repeat(float const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< float >(count, value);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_0(std::vector< float > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_1(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__SetRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Contains(std::vector< float > *self,float const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_float_Sg__IndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_float_Sg__LastIndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Remove(std::vector< float > *self,float const &value){
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< int32_t > *new_std_vector_Sl_int32_t_Sg___SWIG_2(int capacity){
        std::vector< int32_t >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int32_t >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int32_t std_vector_Sl_int32_t_Sg__getitemcopy(std::vector< int32_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int32_t >::value_type const &std_vector_Sl_int32_t_Sg__getitem(std::vector< int32_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__setitem(std::vector< int32_t > *self,int index,int32_t const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__AddRange(std::vector< int32_t > *self,std::vector< int32_t > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int32_t > *std_vector_Sl_int32_t_Sg__GetRange(std::vector< int32_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int32_t >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__Insert(std::vector< int32_t > *self,int index,int32_t const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__InsertRange(std::vector< int32_t > *self,int index,std::vector< int32_t > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__RemoveAt(std::vector< int32_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__RemoveRange(std::vector< int32_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int32_t > *std_vector_Sl_int32_t_Sg__Repeat(int32_t const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int32_t >(count, value);
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__Reverse__SWIG_0(std::vector< int32_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__Reverse__SWIG_1(std::vector< int32_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__SetRange(std::vector< int32_t > *self,int index,std::vector< int32_t > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::map< std::string,struct ggml_tensor * >::mapped_type const &std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__getitem(std::map< std::string,struct ggml_tensor * > *self,std::map< std::string,struct ggml_tensor * >::key_type const &key){
        std::map< std::string, struct ggml_tensor *, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__setitem(std::map< std::string,struct ggml_tensor * > *self,std::map< std::string,struct ggml_tensor * >::key_type const &key,std::map< std::string,struct ggml_tensor * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__ContainsKey(std::map< std::string,struct ggml_tensor * > *self,std::map< std::string,struct ggml_tensor * >::key_type const &key){
        std::map< std::string, struct ggml_tensor *, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__Add(std::map< std::string,struct ggml_tensor * > *self,std::map< std::string,struct ggml_tensor * >::key_type const &key,std::map< std::string,struct ggml_tensor * >::mapped_type const &value){
        std::map< std::string, struct ggml_tensor *, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, struct ggml_tensor * >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__Remove(std::map< std::string,struct ggml_tensor * > *self,std::map< std::string,struct ggml_tensor * >::key_type const &key){
        std::map< std::string, struct ggml_tensor *, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__create_iterator_begin(std::map< std::string,struct ggml_tensor * > *self){
        return new std::map< std::string, struct ggml_tensor *, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,struct ggml_tensor * >::key_type const &std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__get_next_key(std::map< std::string,struct ggml_tensor * > *self,std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, struct ggml_tensor *, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__destroy_iterator(std::map< std::string,struct ggml_tensor * > *self,std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "MptWrapper.h"

SwigDirector_Mpt::SwigDirector_Mpt(mpt_params params) : Mpt(params), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_Mpt::OnNewTokenProcessed(std::string const &token) {
  const char * jtoken = 0 ;
  
  if (!swig_callbackOnNewTokenProcessed) {
    Mpt::OnNewTokenProcessed(token);
    return;
  } else {
    jtoken = (&token)->c_str(); 
    swig_callbackOnNewTokenProcessed(jtoken);
  }
}

void SwigDirector_Mpt::OnLogMessage(std::string const &information) {
  const char * jinformation = 0 ;
  
  if (!swig_callbackOnLogMessage) {
    Mpt::OnLogMessage(information);
    return;
  } else {
    jinformation = (&information)->c_str(); 
    swig_callbackOnLogMessage(jinformation);
  }
}

SwigDirector_Mpt::~SwigDirector_Mpt() {
  
}


void SwigDirector_Mpt::swig_connect_director(SWIG_Callback0_t callbackOnNewTokenProcessed, SWIG_Callback1_t callbackOnLogMessage) {
  swig_callbackOnNewTokenProcessed = callbackOnNewTokenProcessed;
  swig_callbackOnLogMessage = callbackOnLogMessage;
}

void SwigDirector_Mpt::swig_init_callbacks() {
  swig_callbackOnNewTokenProcessed = 0;
  swig_callbackOnLogMessage = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_Clear(void * jarg1) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_Add(void * jarg1, void * jarg2) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  mpt_layer *arg2 = 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (mpt_layer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mpt_layer const & is null", 0);
    return ;
  } 
  (arg1)->push_back((mpt_layer const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_Layers_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  std::vector< mpt_layer >::size_type result;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  result = ((std::vector< mpt_layer > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_Layers_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  std::vector< mpt_layer >::size_type result;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  result = ((std::vector< mpt_layer > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  std::vector< mpt_layer >::size_type arg2 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (std::vector< mpt_layer >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Layers__SWIG_0() {
  void * jresult ;
  std::vector< mpt_layer > *result = 0 ;
  
  result = (std::vector< mpt_layer > *)new std::vector< mpt_layer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Layers__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< mpt_layer > *arg1 = 0 ;
  std::vector< mpt_layer > *result = 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< mpt_layer > const & is null", 0);
    return 0;
  } 
  result = (std::vector< mpt_layer > *)new std::vector< mpt_layer >((std::vector< mpt_layer > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Layers__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< mpt_layer > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< mpt_layer > *)new_std_vector_Sl_mpt_layer_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Layers_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  mpt_layer result;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_mpt_layer_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new mpt_layer(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Layers_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  std::vector< mpt_layer >::value_type *result = 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< mpt_layer >::value_type *) &std_vector_Sl_mpt_layer_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  mpt_layer *arg3 = 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (mpt_layer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mpt_layer const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_mpt_layer_Sg__setitem(arg1,arg2,(mpt_layer const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_AddRange(void * jarg1, void * jarg2) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  std::vector< mpt_layer > *arg2 = 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (std::vector< mpt_layer > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< mpt_layer > const & is null", 0);
    return ;
  } 
  std_vector_Sl_mpt_layer_Sg__AddRange(arg1,(std::vector< mpt_layer > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Layers_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< mpt_layer > *result = 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< mpt_layer > *)std_vector_Sl_mpt_layer_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  mpt_layer *arg3 = 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (mpt_layer *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mpt_layer const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_mpt_layer_Sg__Insert(arg1,arg2,(mpt_layer const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  std::vector< mpt_layer > *arg3 = 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< mpt_layer > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< mpt_layer > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_mpt_layer_Sg__InsertRange(arg1,arg2,(std::vector< mpt_layer > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_RemoveAt(void * jarg1, int jarg2) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_mpt_layer_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_mpt_layer_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Layers_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  mpt_layer *arg1 = 0 ;
  int arg2 ;
  std::vector< mpt_layer > *result = 0 ;
  
  arg1 = (mpt_layer *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mpt_layer const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< mpt_layer > *)std_vector_Sl_mpt_layer_Sg__Repeat((mpt_layer const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_Reverse__SWIG_0(void * jarg1) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  std_vector_Sl_mpt_layer_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_mpt_layer_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Layers_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  int arg2 ;
  std::vector< mpt_layer > *arg3 = 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< mpt_layer > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< mpt_layer > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_mpt_layer_Sg__SetRange(arg1,arg2,(std::vector< mpt_layer > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_Layers(void * jarg1) {
  std::vector< mpt_layer > *arg1 = (std::vector< mpt_layer > *) 0 ;
  
  arg1 = (std::vector< mpt_layer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_Clear(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_Add(void * jarg1, char jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_Buffer_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_Buffer_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Buffer__SWIG_0() {
  void * jresult ;
  std::vector< char > *result = 0 ;
  
  result = (std::vector< char > *)new std::vector< char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Buffer__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & is null", 0);
    return 0;
  } 
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Buffer__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< char > *)new_std_vector_Sl_char_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_MptLibrary_Buffer_getitemcopy(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char result;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (char)std_vector_Sl_char_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_MptLibrary_Buffer_getitem(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_setitem(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__setitem(arg1,arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_AddRange(void * jarg1, void * jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & is null", 0);
    return ;
  } 
  std_vector_Sl_char_Sg__AddRange(arg1,(std::vector< char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Buffer_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_Insert(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__Insert(arg1,arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__InsertRange(arg1,arg2,(std::vector< char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_RemoveAt(void * jarg1, int jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_char_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Buffer_Repeat(char jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = 0 ;
  int arg2 ;
  char temp1 ;
  std::vector< char > *result = 0 ;
  
  temp1 = (char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__Repeat((char const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_Reverse__SWIG_0(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  std_vector_Sl_char_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Buffer_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__SetRange(arg1,arg2,(std::vector< char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MptLibrary_Buffer_Contains(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Contains(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_Buffer_IndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__IndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_Buffer_LastIndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__LastIndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MptLibrary_Buffer_Remove(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Remove(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_Buffer(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_Clear(void * jarg1) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_Add(void * jarg1, void * jarg2) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  gpt_vocab::id *arg2 = 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (gpt_vocab::id *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpt_vocab::id const & is null", 0);
    return ;
  } 
  (arg1)->push_back((gpt_vocab::id const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  std::vector< gpt_vocab::id >::size_type result;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  result = ((std::vector< gpt_vocab::id > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  std::vector< gpt_vocab::id >::size_type result;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  result = ((std::vector< gpt_vocab::id > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  std::vector< gpt_vocab::id >::size_type arg2 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (std::vector< gpt_vocab::id >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_EmbeddingsOfTheTokens__SWIG_0() {
  void * jresult ;
  std::vector< gpt_vocab::id > *result = 0 ;
  
  result = (std::vector< gpt_vocab::id > *)new std::vector< gpt_vocab::id >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_EmbeddingsOfTheTokens__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< gpt_vocab::id > *arg1 = 0 ;
  std::vector< gpt_vocab::id > *result = 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< gpt_vocab::id > const & is null", 0);
    return 0;
  } 
  result = (std::vector< gpt_vocab::id > *)new std::vector< gpt_vocab::id >((std::vector< gpt_vocab::id > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_EmbeddingsOfTheTokens__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< gpt_vocab::id > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< gpt_vocab::id > *)new_std_vector_Sl_gpt_vocab_id_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  gpt_vocab::id result;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_gpt_vocab_id_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new gpt_vocab::id(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  std::vector< gpt_vocab::id >::value_type *result = 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< gpt_vocab::id >::value_type *) &std_vector_Sl_gpt_vocab_id_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  gpt_vocab::id *arg3 = 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (gpt_vocab::id *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpt_vocab::id const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_gpt_vocab_id_Sg__setitem(arg1,arg2,(gpt_vocab::id const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_AddRange(void * jarg1, void * jarg2) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  std::vector< gpt_vocab::id > *arg2 = 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (std::vector< gpt_vocab::id > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< gpt_vocab::id > const & is null", 0);
    return ;
  } 
  std_vector_Sl_gpt_vocab_id_Sg__AddRange(arg1,(std::vector< gpt_vocab::id > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< gpt_vocab::id > *result = 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< gpt_vocab::id > *)std_vector_Sl_gpt_vocab_id_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  gpt_vocab::id *arg3 = 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (gpt_vocab::id *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpt_vocab::id const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_gpt_vocab_id_Sg__Insert(arg1,arg2,(gpt_vocab::id const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  std::vector< gpt_vocab::id > *arg3 = 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< gpt_vocab::id > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< gpt_vocab::id > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_gpt_vocab_id_Sg__InsertRange(arg1,arg2,(std::vector< gpt_vocab::id > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_RemoveAt(void * jarg1, int jarg2) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_gpt_vocab_id_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_gpt_vocab_id_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  gpt_vocab::id *arg1 = 0 ;
  int arg2 ;
  std::vector< gpt_vocab::id > *result = 0 ;
  
  arg1 = (gpt_vocab::id *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gpt_vocab::id const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< gpt_vocab::id > *)std_vector_Sl_gpt_vocab_id_Sg__Repeat((gpt_vocab::id const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_Reverse__SWIG_0(void * jarg1) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  std_vector_Sl_gpt_vocab_id_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_gpt_vocab_id_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_EmbeddingsOfTheTokens_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  int arg2 ;
  std::vector< gpt_vocab::id > *arg3 = 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< gpt_vocab::id > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< gpt_vocab::id > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_gpt_vocab_id_Sg__SetRange(arg1,arg2,(std::vector< gpt_vocab::id > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_EmbeddingsOfTheTokens(void * jarg1) {
  std::vector< gpt_vocab::id > *arg1 = (std::vector< gpt_vocab::id > *) 0 ;
  
  arg1 = (std::vector< gpt_vocab::id > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_Clear(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_Add(void * jarg1, float jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((float const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_Logits_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_Logits_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Logits__SWIG_0() {
  void * jresult ;
  std::vector< float > *result = 0 ;
  
  result = (std::vector< float > *)new std::vector< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Logits__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Logits__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MptLibrary_Logits_getitemcopy(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float)std_vector_Sl_float_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MptLibrary_Logits_getitem(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_setitem(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__setitem(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_AddRange(void * jarg1, void * jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  std_vector_Sl_float_Sg__AddRange(arg1,(std::vector< float > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Logits_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_Insert(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__Insert(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__InsertRange(arg1,arg2,(std::vector< float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_RemoveAt(void * jarg1, int jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_float_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Logits_Repeat(float jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  std::vector< float > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__Repeat((float const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_Reverse__SWIG_0(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  std_vector_Sl_float_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Logits_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__SetRange(arg1,arg2,(std::vector< float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MptLibrary_Logits_Contains(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Contains(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_Logits_IndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__IndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_Logits_LastIndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__LastIndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MptLibrary_Logits_Remove(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Remove(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_Logits(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_Tokens_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_Tokens_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Tokens__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Tokens__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Tokens__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_Tokens_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_Tokens_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Tokens_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Tokens_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tokens_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MptLibrary_Tokens_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_Tokens_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_Tokens_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MptLibrary_Tokens_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_Tokens(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_Clear(void * jarg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_Add(void * jarg1, void * jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int32_t *arg2 = 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int32_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int32_t const & is null", 0);
    return ;
  } 
  (arg1)->push_back((int32_t const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_LastNTokens_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type result;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  result = ((std::vector< int32_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_LastNTokens_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type result;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  result = ((std::vector< int32_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t >::size_type arg2 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (std::vector< int32_t >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_LastNTokens__SWIG_0() {
  void * jresult ;
  std::vector< int32_t > *result = 0 ;
  
  result = (std::vector< int32_t > *)new std::vector< int32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_LastNTokens__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int32_t > *arg1 = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int32_t > const & is null", 0);
    return 0;
  } 
  result = (std::vector< int32_t > *)new std::vector< int32_t >((std::vector< int32_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_LastNTokens__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int32_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int32_t > *)new_std_vector_Sl_int32_t_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_LastNTokens_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  int32_t result;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_int32_t_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new int32_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_LastNTokens_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int32_t >::value_type *result = 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int32_t >::value_type *) &std_vector_Sl_int32_t_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  int32_t *arg3 = 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int32_t *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int32_t const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int32_t_Sg__setitem(arg1,arg2,(int32_t const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_AddRange(void * jarg1, void * jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int32_t > *arg2 = 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (std::vector< int32_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int32_t > const & is null", 0);
    return ;
  } 
  std_vector_Sl_int32_t_Sg__AddRange(arg1,(std::vector< int32_t > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_LastNTokens_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int32_t > *result = 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int32_t > *)std_vector_Sl_int32_t_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  int32_t *arg3 = 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int32_t *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int32_t const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int32_t_Sg__Insert(arg1,arg2,(int32_t const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int32_t > *arg3 = 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int32_t > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int32_t_Sg__InsertRange(arg1,arg2,(std::vector< int32_t > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int32_t_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int32_t_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_LastNTokens_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  int32_t *arg1 = 0 ;
  int arg2 ;
  std::vector< int32_t > *result = 0 ;
  
  arg1 = (int32_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int32_t const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int32_t > *)std_vector_Sl_int32_t_Sg__Repeat((int32_t const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_Reverse__SWIG_0(void * jarg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  std_vector_Sl_int32_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int32_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_LastNTokens_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int32_t > *arg3 = 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int32_t > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int32_t_Sg__SetRange(arg1,arg2,(std::vector< int32_t > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_LastNTokens(void * jarg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  arg1 = (std::vector< int32_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Tensors__SWIG_0() {
  void * jresult ;
  std::map< std::string,struct ggml_tensor * > *result = 0 ;
  
  result = (std::map< std::string,struct ggml_tensor * > *)new std::map< std::string,struct ggml_tensor * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Tensors__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,ggml_tensor * > *arg1 = 0 ;
  std::map< std::string,struct ggml_tensor * > *result = 0 ;
  
  arg1 = (std::map< std::string,ggml_tensor * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,ggml_tensor * > const & is null", 0);
    return 0;
  } 
  result = (std::map< std::string,struct ggml_tensor * > *)new std::map< std::string,struct ggml_tensor * >((std::map< std::string,ggml_tensor * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MptLibrary_Tensors_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  std::map< std::string,struct ggml_tensor * >::size_type result;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  result = ((std::map< std::string,struct ggml_tensor * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MptLibrary_Tensors_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  result = (bool)((std::map< std::string,struct ggml_tensor * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tensors_Clear(void * jarg1) {
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Tensors_getitem(void * jarg1, const char * jarg2) {
  void * jresult ;
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  std::map< std::string,struct ggml_tensor * >::key_type *arg2 = 0 ;
  std::map< std::string,struct ggml_tensor * >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,struct ggml_tensor * >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::map< std::string,struct ggml_tensor * >::mapped_type *) &std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__getitem(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tensors_setitem(void * jarg1, const char * jarg2, void * jarg3) {
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  std::map< std::string,struct ggml_tensor * >::key_type *arg2 = 0 ;
  std::map< std::string,struct ggml_tensor * >::mapped_type *arg3 = 0 ;
  std::map< std::string,struct ggml_tensor * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,struct ggml_tensor * >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,struct ggml_tensor * >::mapped_type)jarg3;
  arg3 = (std::map< std::string,struct ggml_tensor * >::mapped_type *)&temp3; 
  std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__setitem(arg1,(std::string const &)*arg2,(ggml_tensor *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MptLibrary_Tensors_ContainsKey(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  std::map< std::string,struct ggml_tensor * >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,struct ggml_tensor * >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tensors_Add(void * jarg1, const char * jarg2, void * jarg3) {
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  std::map< std::string,struct ggml_tensor * >::key_type *arg2 = 0 ;
  std::map< std::string,struct ggml_tensor * >::mapped_type *arg3 = 0 ;
  std::map< std::string,struct ggml_tensor * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,struct ggml_tensor * >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (std::map< std::string,struct ggml_tensor * >::mapped_type)jarg3;
  arg3 = (std::map< std::string,struct ggml_tensor * >::mapped_type *)&temp3; 
  try {
    std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__Add(arg1,(std::string const &)*arg2,(ggml_tensor *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MptLibrary_Tensors_Remove(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  std::map< std::string,struct ggml_tensor * >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,struct ggml_tensor * >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Tensors_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  result = (std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MptLibrary_Tensors_get_next_key(void * jarg1, void * jarg2) {
  const char * jresult ;
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *arg2 = (std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,struct ggml_tensor * >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  arg2 = (std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *)jarg2; 
  result = (std::map< std::string,struct ggml_tensor * >::key_type *) &std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__get_next_key(arg1,arg2);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Tensors_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *arg2 = (std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  arg2 = (std::map< std::string,ggml_tensor *,std::less< std::string > >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_struct_SS_ggml_tensor_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_Tensors(void * jarg1) {
  std::map< std::string,struct ggml_tensor * > *arg1 = (std::map< std::string,struct ggml_tensor * > *) 0 ;
  
  arg1 = (std::map< std::string,struct ggml_tensor * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_d_model_set(void * jarg1, int jarg2) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->d_model = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_d_model_get(void * jarg1) {
  int jresult ;
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int result;
  
  arg1 = (mpt_hparams *)jarg1; 
  result = (int) ((arg1)->d_model);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_max_seq_len_set(void * jarg1, int jarg2) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_seq_len = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_max_seq_len_get(void * jarg1) {
  int jresult ;
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int result;
  
  arg1 = (mpt_hparams *)jarg1; 
  result = (int) ((arg1)->max_seq_len);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_n_heads_set(void * jarg1, int jarg2) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_heads = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_n_heads_get(void * jarg1) {
  int jresult ;
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int result;
  
  arg1 = (mpt_hparams *)jarg1; 
  result = (int) ((arg1)->n_heads);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_n_layers_set(void * jarg1, int jarg2) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_layers = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_n_layers_get(void * jarg1) {
  int jresult ;
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int result;
  
  arg1 = (mpt_hparams *)jarg1; 
  result = (int) ((arg1)->n_layers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_n_vocab_set(void * jarg1, int jarg2) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_vocab = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_n_vocab_get(void * jarg1) {
  int jresult ;
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int result;
  
  arg1 = (mpt_hparams *)jarg1; 
  result = (int) ((arg1)->n_vocab);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_alibi_bias_max_set(void * jarg1, float jarg2) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  float arg2 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->alibi_bias_max = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_alibi_bias_max_get(void * jarg1) {
  float jresult ;
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  float result;
  
  arg1 = (mpt_hparams *)jarg1; 
  result = (float) ((arg1)->alibi_bias_max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_clip_qkv_set(void * jarg1, float jarg2) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  float arg2 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->clip_qkv = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_clip_qkv_get(void * jarg1) {
  float jresult ;
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  float result;
  
  arg1 = (mpt_hparams *)jarg1; 
  result = (float) ((arg1)->clip_qkv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_ftype_set(void * jarg1, int jarg2) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ftype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_ftype_get(void * jarg1) {
  int jresult ;
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int result;
  
  arg1 = (mpt_hparams *)jarg1; 
  result = (int) ((arg1)->ftype);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_n_ctx_set(void * jarg1, int jarg2) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_ctx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_hparams_n_ctx_get(void * jarg1) {
  int jresult ;
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  int result;
  
  arg1 = (mpt_hparams *)jarg1; 
  result = (int) ((arg1)->n_ctx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_mpt_hparams() {
  void * jresult ;
  mpt_hparams *result = 0 ;
  
  result = (mpt_hparams *)new mpt_hparams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_mpt_hparams(void * jarg1) {
  mpt_hparams *arg1 = (mpt_hparams *) 0 ;
  
  arg1 = (mpt_hparams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_layer_norm_1_weight_set(void * jarg1, void * jarg2) {
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->norm_1_weight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_layer_norm_1_weight_get(void * jarg1) {
  void * jresult ;
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  result = (ggml_tensor *) ((arg1)->norm_1_weight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_layer_c_attn_wqkv_weight_set(void * jarg1, void * jarg2) {
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->c_attn_wqkv_weight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_layer_c_attn_wqkv_weight_get(void * jarg1) {
  void * jresult ;
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  result = (ggml_tensor *) ((arg1)->c_attn_wqkv_weight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_layer_c_attn_out_proj_weight_set(void * jarg1, void * jarg2) {
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->c_attn_out_proj_weight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_layer_c_attn_out_proj_weight_get(void * jarg1) {
  void * jresult ;
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  result = (ggml_tensor *) ((arg1)->c_attn_out_proj_weight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_layer_norm_2_weight_set(void * jarg1, void * jarg2) {
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->norm_2_weight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_layer_norm_2_weight_get(void * jarg1) {
  void * jresult ;
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  result = (ggml_tensor *) ((arg1)->norm_2_weight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_layer_ffn_up_proj_set(void * jarg1, void * jarg2) {
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->ffn_up_proj = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_layer_ffn_up_proj_get(void * jarg1) {
  void * jresult ;
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  result = (ggml_tensor *) ((arg1)->ffn_up_proj);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_layer_ffn_down_proj_set(void * jarg1, void * jarg2) {
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->ffn_down_proj = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_layer_ffn_down_proj_get(void * jarg1) {
  void * jresult ;
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  result = (ggml_tensor *) ((arg1)->ffn_down_proj);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_mpt_layer() {
  void * jresult ;
  mpt_layer *result = 0 ;
  
  result = (mpt_layer *)new mpt_layer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_mpt_layer(void * jarg1) {
  mpt_layer *arg1 = (mpt_layer *) 0 ;
  
  arg1 = (mpt_layer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_model_hparams_set(void * jarg1, void * jarg2) {
  mpt_model *arg1 = (mpt_model *) 0 ;
  mpt_hparams *arg2 = (mpt_hparams *) 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  arg2 = (mpt_hparams *)jarg2; 
  if (arg1) (arg1)->hparams = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_model_hparams_get(void * jarg1) {
  void * jresult ;
  mpt_model *arg1 = (mpt_model *) 0 ;
  mpt_hparams *result = 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  result = (mpt_hparams *)& ((arg1)->hparams);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_model_wte_weight_set(void * jarg1, void * jarg2) {
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->wte_weight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_model_wte_weight_get(void * jarg1) {
  void * jresult ;
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  result = (ggml_tensor *) ((arg1)->wte_weight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_model_norm_f_weight_set(void * jarg1, void * jarg2) {
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->norm_f_weight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_model_norm_f_weight_get(void * jarg1) {
  void * jresult ;
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  result = (ggml_tensor *) ((arg1)->norm_f_weight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_model_layers_set(void * jarg1, void * jarg2) {
  mpt_model *arg1 = (mpt_model *) 0 ;
  std::vector< mpt_layer > *arg2 = (std::vector< mpt_layer > *) 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  arg2 = (std::vector< mpt_layer > *)jarg2; 
  if (arg1) (arg1)->layers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_model_layers_get(void * jarg1) {
  void * jresult ;
  mpt_model *arg1 = (mpt_model *) 0 ;
  std::vector< mpt_layer > *result = 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  result = (std::vector< mpt_layer > *)& ((arg1)->layers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_model_memory_k_set(void * jarg1, void * jarg2) {
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->memory_k = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_model_memory_k_get(void * jarg1) {
  void * jresult ;
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  result = (ggml_tensor *) ((arg1)->memory_k);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_model_memory_v_set(void * jarg1, void * jarg2) {
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_tensor *arg2 = (ggml_tensor *) 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  arg2 = (ggml_tensor *)jarg2; 
  if (arg1) (arg1)->memory_v = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_model_memory_v_get(void * jarg1) {
  void * jresult ;
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_tensor *result = 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  result = (ggml_tensor *) ((arg1)->memory_v);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_model_ctx_set(void * jarg1, void * jarg2) {
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_context *arg2 = (ggml_context *) 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  arg2 = (ggml_context *)jarg2; 
  if (arg1) (arg1)->ctx = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_model_ctx_get(void * jarg1) {
  void * jresult ;
  mpt_model *arg1 = (mpt_model *) 0 ;
  ggml_context *result = 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  result = (ggml_context *) ((arg1)->ctx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_model_tensors_set(void * jarg1, void * jarg2) {
  mpt_model *arg1 = (mpt_model *) 0 ;
  std::map< std::string,ggml_tensor *,std::less< std::string > > *arg2 = (std::map< std::string,ggml_tensor *,std::less< std::string > > *) 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  arg2 = (std::map< std::string,ggml_tensor *,std::less< std::string > > *)jarg2; 
  if (arg1) (arg1)->tensors = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_mpt_model_tensors_get(void * jarg1) {
  void * jresult ;
  mpt_model *arg1 = (mpt_model *) 0 ;
  std::map< std::string,ggml_tensor *,std::less< std::string > > *result = 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  result = (std::map< std::string,ggml_tensor *,std::less< std::string > > *)& ((arg1)->tensors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_mpt_model() {
  void * jresult ;
  mpt_model *result = 0 ;
  
  result = (mpt_model *)new mpt_model();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_mpt_model(void * jarg1) {
  mpt_model *arg1 = (mpt_model *) 0 ;
  
  arg1 = (mpt_model *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_n_threads_set(void * jarg1, int jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_threads = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_params_n_threads_get(void * jarg1) {
  int jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  int result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (int) ((arg1)->n_threads);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_seed_set(void * jarg1, int jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_params_seed_get(void * jarg1) {
  int jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  int result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (int) ((arg1)->seed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_n_predict_set(void * jarg1, int jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_predict = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_params_n_predict_get(void * jarg1) {
  int jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  int result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (int) ((arg1)->n_predict);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_n_batch_set(void * jarg1, int jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_batch = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_params_n_batch_get(void * jarg1) {
  int jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  int result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (int) ((arg1)->n_batch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_n_ctx_set(void * jarg1, int jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_ctx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_params_n_ctx_get(void * jarg1) {
  int jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  int result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (int) ((arg1)->n_ctx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_model_set(void * jarg1, const char * jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (mpt_params *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->model = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MptLibrary_mpt_params_model_get(void * jarg1) {
  const char * jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (mpt_params *)jarg1; 
  result = (std::string *) & ((arg1)->model);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_top_k_set(void * jarg1, int jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->top_k = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_params_top_k_get(void * jarg1) {
  int jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  int result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (int) ((arg1)->top_k);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_top_p_set(void * jarg1, float jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  float arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->top_p = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MptLibrary_mpt_params_top_p_get(void * jarg1) {
  float jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  float result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (float) ((arg1)->top_p);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_temp_set(void * jarg1, float jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  float arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->temp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MptLibrary_mpt_params_temp_get(void * jarg1) {
  float jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  float result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (float) ((arg1)->temp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_repeat_last_n_set(void * jarg1, int jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  int arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->repeat_last_n = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MptLibrary_mpt_params_repeat_last_n_get(void * jarg1) {
  int jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  int result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (int) ((arg1)->repeat_last_n);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_mpt_params_repeat_penalty_set(void * jarg1, float jarg2) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  float arg2 ;
  
  arg1 = (mpt_params *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->repeat_penalty = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MptLibrary_mpt_params_repeat_penalty_get(void * jarg1) {
  float jresult ;
  mpt_params *arg1 = (mpt_params *) 0 ;
  float result;
  
  arg1 = (mpt_params *)jarg1; 
  result = (float) ((arg1)->repeat_penalty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_mpt_params() {
  void * jresult ;
  mpt_params *result = 0 ;
  
  result = (mpt_params *)new mpt_params();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_mpt_params(void * jarg1) {
  mpt_params *arg1 = (mpt_params *) 0 ;
  
  arg1 = (mpt_params *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_new_Mpt(void * jarg1) {
  void * jresult ;
  mpt_params arg1 ;
  mpt_params *argp1 ;
  Mpt *result = 0 ;
  
  argp1 = (mpt_params *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mpt_params", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Mpt *)new SwigDirector_Mpt(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Mpt_OnNewTokenProcessed(void * jarg1, const char * jarg2) {
  Mpt *arg1 = (Mpt *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mpt *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->OnNewTokenProcessed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Mpt_OnNewTokenProcessedSwigExplicitMpt(void * jarg1, const char * jarg2) {
  Mpt *arg1 = (Mpt *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mpt *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->Mpt::OnNewTokenProcessed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Mpt_OnLogMessage(void * jarg1, const char * jarg2) {
  Mpt *arg1 = (Mpt *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mpt *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->OnLogMessage((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Mpt_OnLogMessageSwigExplicitMpt(void * jarg1, const char * jarg2) {
  Mpt *arg1 = (Mpt *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mpt *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->Mpt::OnLogMessage((std::string const &)*arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MptLibrary_Mpt_Process(void * jarg1, const char * jarg2) {
  const char * jresult ;
  Mpt *arg1 = (Mpt *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (Mpt *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->Process((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MptLibrary_Mpt_TokenizeMessage(void * jarg1, const char * jarg2) {
  void * jresult ;
  Mpt *arg1 = (Mpt *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > result;
  
  arg1 = (Mpt *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->TokenizeMessage((std::string const &)*arg2);
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MptLibrary_Mpt_ProcessTokenizedMessage(void * jarg1, void * jarg2) {
  const char * jresult ;
  Mpt *arg1 = (Mpt *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::string result;
  
  arg1 = (Mpt *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return 0;
  } 
  result = (arg1)->ProcessTokenizedMessage((std::vector< int > const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Mpt_LogPerplexity(void * jarg1, const char * jarg2) {
  Mpt *arg1 = (Mpt *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mpt *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->LogPerplexity((std::string const &)*arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MptLibrary_Mpt_GetRandomMessage(void * jarg1) {
  const char * jresult ;
  Mpt *arg1 = (Mpt *) 0 ;
  std::string result;
  
  arg1 = (Mpt *)jarg1; 
  result = (arg1)->GetRandomMessage();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_delete_Mpt(void * jarg1) {
  Mpt *arg1 = (Mpt *) 0 ;
  
  arg1 = (Mpt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MptLibrary_Mpt_director_connect(void *objarg, SwigDirector_Mpt::SWIG_Callback0_t callback0, SwigDirector_Mpt::SWIG_Callback1_t callback1) {
  Mpt *obj = (Mpt *)objarg;
  SwigDirector_Mpt *director = static_cast<SwigDirector_Mpt *>(obj);
  director->swig_connect_director(callback0, callback1);
}


#ifdef __cplusplus
}
#endif

